local Octree = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sleitnick/rbxts-octo-tree/main/src/init.lua", true))()
local rt = {}
rt.Players = game:GetService("Players")
rt.player = rt.Players.LocalPlayer
rt.coinContainer = nil
rt.octree = Octree.new()
rt.Material = Enum.Material.Ice
rt.TpBackToStart = true
rt.radius = 200
rt.walkspeed = 30
rt.touchedCoins = {}
rt.positionChangeConnections = setmetatable({}, { __mode = "v" })
rt.MainGUI = rt.player.PlayerGui.MainGUI or rt.player.PlayerGui:WaitForChild("MainGUI")

function rt:Character()
    return self.player.Character or self.player.CharacterAdded:Wait()
end

function rt:Map()
    for _, v in workspace:GetDescendants() do
        if v:IsA("Model") and v.Name == "Base" then
            return v.Parent
        end
    end
end

function rt.Disconnect(connection)
    if typeof(connection) ~= "RBXScriptConnection" then return end
    if connection.Connected then connection:Disconnect() end
end

local function isCoinTouched(coin)
    return rt.touchedCoins[coin]
end

local function markCoinAsTouched(coin)
    rt.touchedCoins[coin] = true
    local node = rt.octree:FindFirstNode(coin)
    if node then rt.octree:RemoveNode(node) end
end

local function setupTouchTracking(coin)
    local touchInterest = coin:FindFirstChildWhichIsA("TouchTransmitter")
    if touchInterest then
        local connection
        connection = touchInterest.AncestryChanged:Connect(function(_, parent)
            if parent == nil then
                markCoinAsTouched(coin)
                rt.Disconnect(connection)
            end
        end)
        rt.positionChangeConnections[coin] = connection
    end
end

local function setupPositionTracking(coin, LastPositonY)
    local connection
    connection = coin:GetPropertyChangedSignal("Position"):Connect(function()
        local currentY = coin.Position.Y
        if LastPositonY and LastPositonY ~= currentY then
            markCoinAsTouched(coin)
            rt.Disconnect(connection)
            coin:Destroy()
        end
    end)
    rt.positionChangeConnections[coin] = connection
end

local function populateOctree()
    rt.octree:ClearAllNodes()
    for _, descendant in pairs(rt.coinContainer:GetDescendants()) do
        if descendant:IsA("TouchTransmitter") then
            local parentCoin = descendant.Parent
            if not isCoinTouched(parentCoin) then
                rt.octree:CreateNode(parentCoin.Position, parentCoin)
                setupTouchTracking(parentCoin)
            end
            setupPositionTracking(parentCoin, parentCoin.Position.Y)
        end
    end
    rt.Added = rt.coinContainer.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("MeshPart") and descendant.Material == rt.Material then
            local parentCoin = descendant.Parent
            if not isCoinTouched(parentCoin) then
                rt.octree:CreateNode(parentCoin.Position, parentCoin)
                setupTouchTracking(parentCoin)
                setupPositionTracking(parentCoin, parentCoin.Position.Y)
            end
        end
    end)
    rt.Removing = rt.coinContainer.DescendantRemoving:Connect(function(descendant)
        if descendant:IsA("TouchTransmitter") and descendant.Parent.Name == "Coin_Server" then
            local parentCoin = descendant.Parent
            if isCoinTouched(parentCoin) then
                markCoinAsTouched(parentCoin)
            end
        end
    end)
end

local function moveToPositionSlowly(targetPosition, duration)
    rt.humanoidRootPart = rt:Character().PrimaryPart
    local startPosition = rt.humanoidRootPart.Position
    local startTime = tick()
    while true do
        local elapsedTime = tick() - startTime
        local alpha = math.min(elapsedTime / duration, 1)
        rt:Character():PivotTo(CFrame.new(startPosition:Lerp(targetPosition, alpha)))
        if alpha >= 1 then task.wait(0.2) break end
        task.wait()
    end
end

local collecting = false
local collectionThread

local function collectCoins()
    rt.coinContainer = rt:Map():FindFirstChild("CoinContainer")
    rt.waypoint = rt:Character():GetPivot()
    populateOctree()
    while collecting do
        if rt.MainGUI:WaitForChild("Game").CoinBags.Container.SnowToken.FullBagIcon.Visible then
            break
        end
        local nearestNode = rt.octree:GetNearest(rt:Character().PrimaryPart.Position, rt.radius, 1)[1]
        if nearestNode then
            local coin = nearestNode.Object
            if not isCoinTouched(coin) then
                local distance = (rt:Character().PrimaryPart.Position - coin.Position).Magnitude
                local duration = distance / rt.walkspeed
                moveToPositionSlowly(coin.Position, duration)
                markCoinAsTouched(coin)
                task.wait(0.2)
            end
        else
            task.wait(1)
        end
    end
    if rt.TpBackToStart then
        rt:Character():PivotTo(rt.waypoint)
    end
end

local function startCollecting()
    collecting = true
    collectionThread = coroutine.create(collectCoins)
    coroutine.resume(collectionThread)
end

local function stopCollecting()
    collecting = false
    if collectionThread then coroutine.close(collectionThread) end
end

local GUI = Instance.new("ScreenGui", game.CoreGui)
GUI.Name = "CoconutHub"
local Frame = Instance.new("Frame", GUI)
Frame.Size = UDim2.new(0, 250, 0, 120)
Frame.Position = UDim2.new(0.05, 0, 0.1, 0)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.Active = true
Frame.Draggable = true
Instance.new("UICorner", Frame).CornerRadius = UDim.new(0, 10)

local Title = Instance.new("TextLabel", Frame)
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundTransparency = 1
Title.Text = "Coconut Hub"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 20

local Toggle = Instance.new("TextButton", Frame)
Toggle.Size = UDim2.new(0.8, 0, 0, 40)
Toggle.Position = UDim2.new(0.1, 0, 0.45, 0)
Toggle.Text = "Auto Farm: OFF"
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
Toggle.Font = Enum.Font.Gotham
Toggle.TextSize = 16
Instance.new("UICorner", Toggle).CornerRadius = UDim.new(0, 6)

Toggle.MouseButton1Click:Connect(function()
    collecting = not collecting
    if collecting then
        Toggle.Text = "Auto Farm: ON"
        startCollecting()
    else
        Toggle.Text = "Auto Farm: OFF"
        stopCollecting()
    end
end)

local died = rt.player.CharacterRemoving:Connect(function()
    stopCollecting()
    for _, connection in pairs(rt.positionChangeConnections) do
        rt.Disconnect(connection)
    end
    rt.Disconnect(rt.Added)
    rt.Disconnect(rt.Removing)
    rt = nil
    Octree = nil
end)

rt.Players.PlayerRemoving:Connect(function()
    died:Disconnect()
end)
