
-- Load Octree library
local Octree = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sleitnick/rbxts-octo-tree/main/src/init.lua", true))()

local rt = {}
rt.__index = rt
rt.octree = Octree.new()

rt.RoundInProgress = false
rt.Players = game.Players
rt.player = game.Players.LocalPlayer
rt.coinContainer = nil
rt.radius = 200
rt.walkspeed = 30
rt.touchedCoins = {}
rt.positionChangeConnections = setmetatable({}, { __mode = "v" })
rt.Added = nil
rt.Removing = nil
rt.UserDied = nil

local State = {
    Action = "Action",
    StandStillWait = "StandStillWait",
    WaitingForRound = "WaitingForRound",
    WaitingForRoundEnd = "WaitingForRoundEnd",
    RespawnState = "RespawnState"
}

local CurrentState = State.WaitingForRound
local LastPosition = nil
local BagIsFull = false
local Working = false
local IsMurderer = false

local ROUND_TIMER = workspace:WaitForChild("RoundTimerPart").SurfaceGui.Timer
local PLAYER_GUI = rt.player:WaitForChild("PlayerGui")

function rt:Message(_Title, _Text, Time)
    game:GetService("StarterGui"):SetCore("SendNotification", { Title = _Title, Text = _Text, Duration = Time })
end

function rt:Character()
    return self.player.Character or self.player.CharacterAdded:Wait()
end

function rt:GetCharacterLoaded()
    repeat task.wait(0.02) until rt:Character() ~= nil
end

function rt:Map()
    for _, v in workspace:GetDescendants() do
        if v.Name == "Spawns" and v.Parent.Name ~= "Lobby" then
            return v.Parent
        end
    end
    return nil
end

function rt:CheckIfGameInProgress()
    return rt:Map() ~= nil
end

function rt:IsElite()
    return self.player:GetAttribute("Elite") or false
end

local function AutoFarmCleanUp()
    for _, connection in pairs(rt.positionChangeConnections) do
        if connection and connection.Connected then
            connection:Disconnect()
        end
    end
    rt.Disconnect(rt.Added)
    rt.Disconnect(rt.Removing)
    table.clear(rt.touchedCoins)
    table.clear(rt.positionChangeConnections)
    rt.octree:ClearAllNodes()
end

function rt.Disconnect(connection)
    if connection and connection.Connected then
        connection:Disconnect()
    end
end

local function isCoinTouched(coin)
    return rt.touchedCoins[coin]
end

local function markCoinAsTouched(coin)
    rt.touchedCoins[coin] = true
    local node = rt.octree:FindFirstNode(coin)
    if node then
        rt.octree:RemoveNode(node)
    end
end

local function setupTouchTracking(coin)
    local touchInterest = coin:FindFirstChildWhichIsA("TouchTransmitter")
    if touchInterest then
        local connection
        connection = touchInterest.AncestryChanged:Connect(function(_, parent)
            if not rt then connection:Disconnect() return end
            if parent == nil then
                markCoinAsTouched(coin)
                rt.Disconnect(connection)
            end
        end)
        rt.positionChangeConnections[coin] = connection
    end
end

local function setupPositionTracking(coin, LastPositionY)
    local connection
    connection = coin:GetPropertyChangedSignal("Position"):Connect(function()
        local currentY = coin.Position.Y
        if LastPositionY and LastPositionY ~= currentY then
            markCoinAsTouched(coin)
            rt.Disconnect(connection)
            coin:Destroy()
        end
    end)
    rt.positionChangeConnections[coin] = connection
end

local function populateOctree()
    rt.octree:ClearAllNodes()
    for _, descendant in pairs(rt.coinContainer:GetDescendants()) do
        if descendant:IsA("TouchTransmitter") then
            local parentCoin = descendant.Parent
            if not isCoinTouched(parentCoin) then
                rt.octree:CreateNode(parentCoin.Position, parentCoin)
                setupTouchTracking(parentCoin)
            end
            setupPositionTracking(parentCoin, parentCoin.Position.Y)
        end
    end

    rt.Added = rt.coinContainer.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("TouchTransmitter") then
            local parentCoin = descendant.Parent
            if not isCoinTouched(parentCoin) then
                rt.octree:CreateNode(parentCoin.Position, parentCoin)
                setupTouchTracking(parentCoin)
                setupPositionTracking(parentCoin, parentCoin.Position.Y)
            end
        end
    end)

    rt.Removing = rt.coinContainer.DescendantRemoving:Connect(function(descendant)
        if descendant:IsA("TouchTransmitter") and descendant.Parent.Name == "Coin_Server" then
            local parentCoin = descendant.Parent
            if isCoinTouched(parentCoin) then
                markCoinAsTouched(parentCoin)
            end
        end
    end)
end

local function moveToPositionSlowly(targetPosition, duration)
    local startPosition = rt:Character().PrimaryPart.Position
    local startTime = tick()

    while true do
        local elapsedTime = tick() - startTime
        local alpha = math.min(elapsedTime / duration, 1)

        if rt:Character() == nil then break end

        rt:Character():PivotTo(CFrame.new(startPosition:Lerp(targetPosition, alpha)))

        if alpha >= 1 then
            task.wait(0.2)
            break
        end

        task.wait()
    end
end

local function IsBagFull()
    local playerGui = PLAYER_GUI:WaitForChild("MainGUI")
    local coinText = playerGui.Game.CoinBags.Container.SnowToken.CurrencyFrame.Icon.Coins.Text
    return tonumber(coinText) >= (rt:IsElite() and 50 or 40)
end

local function CollectCoins()
    Working = true
    rt.coinContainer = rt:Map():FindFirstChild("CoinContainer")
    populateOctree()
    while CurrentState == State.Action do
        if IsBagFull() then
            rt:Message("Alert", "Bag is full!", 2)
            BagIsFull = true
            break
        end

        if rt:Character() == nil then break end

        local nearestNode = rt.octree:GetNearest(rt:Character().PrimaryPart.Position, rt.radius, 1)[1]
        if nearestNode then
            local closestCoin = nearestNode.Object
            if not isCoinTouched(closestCoin) then
                local targetPosition = closestCoin.Position
                local duration = (rt:Character().PrimaryPart.Position - targetPosition).Magnitude / rt.walkspeed
                moveToPositionSlowly(targetPosition, duration)
                markCoinAsTouched(closestCoin)
                task.wait(0.2)
            end
        else
            task.wait(1)
        end
    end
    AutoFarmCleanUp()
end

local function ChangeState(State)
    CurrentState = State
end

local function ActionState()
    LastPosition = nil
    if IsMurderer then
        rt:Message("Info", "You are the Murderer! Collecting coins...", 2)
        CollectCoins()
    else
        rt:Message("Info", "Collecting coins...", 2)
        CollectCoins()
    end
    if BagIsFull or not rt.RoundInProgress then
        rt:Message("Info", "Returning to Waiting State...", 2)
        BagIsFull = false
        Working = false
        ChangeState(State.WaitingForRoundEnd)
    end
end

local function WaitingForRound()
    rt:Message("Info", "Waiting for round to start...", 2)
    Working = false
    repeat task.wait(0.5) until rt.RoundInProgress and rt:Character() ~= nil
    rt:Message("Alert", "Round started!", 2)
    ChangeState(State.Action)
end

local function waitForRoundEnd()
    rt:Message("Info", "Waiting for round to end...", 2)
    Working = false
    repeat task.wait(1) until not rt.RoundInProgress
    rt:Message("Alert", "Round ended!", 2)
    ChangeState(State.WaitingForRound)
end

local function RespawnState()
    rt:Message("Info", "Respawning...", 2)
    rt:GetCharacterLoaded()
    task.wait(1)
    if LastPosition == nil then LastPosition = rt.player.Character:GetPivot() end
    if rt:Character() then
        rt:GetCharacterLoaded()
        rt:Character():PivotTo(LastPosition)
    end
    rt:Message("Info", "Respawned!", 2)
    if not rt.RoundInProgress then
        rt:Message("Info", "Round ended during respawn!", 2)
        ChangeState(State.WaitingForRound)
        return
    end
    ChangeState(State.Action)
end

local function StandStillWait()
    rt:Message("Info", "Waiting for murderer to respawn", 2)
    ChangeState("Nothing")
    rt:GetCharacterLoaded()
    task.wait(2)
    ChangeState(State.WaitingForRound)
end

-- Setup Murderer detection and event hooks
IsMurderer = rt.player.Backpack:FindFirstChild("Knife") and true or false

rt.RoleTracker1 = rt.player.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Tool") and descendant.Name == "Knife" then
        IsMurderer = true
    end
end)

rt.UserDied = rt.player.CharacterRemoving:Connect(function(character)
    if Working then
        Working = false
        IsMurderer = false
        LastPosition = nil
        ChangeState(State.RespawnState)
    end
end)

ROUND_TIMER:GetPropertyChangedSignal("Text"):Connect(function()
    rt.RoundInProgress = true
end)

PLAYER_GUI.ChildAdded:Connect(function(child)
    if child:IsA("Sound") then
        rt.RoundInProgress = false
        Working = false
        ChangeState(State.WaitingForRound)
    end
end)

--[[
-------------------
  CUSTOM UI SETUP
-------------------
]]

local StarterGui = game:GetService("StarterGui")
local PlayerGui = rt.player:WaitForChild("PlayerGui")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CoconutHubUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = PlayerGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 280, 0, 150)
Frame.Position = UDim2.new(0, 20, 0, 20)
Frame.BackgroundColor3 = Color3.fromRGB(54, 57, 63)
Frame.BorderSizePixel = 0
Frame.Parent = ScreenGui
Frame.Active = true
Frame.Draggable = true

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundColor3 = Color3.fromRGB(35, 39, 42)
Title.BorderSizePixel = 0
Title.Text = "Coconut Hub"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 22
Title.Parent = Frame

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -20, 0, 25)
StatusLabel.Position = UDim2.new(0, 10, 0, 40)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: Waiting"
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.TextSize = 18
StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
StatusLabel.Parent = Frame

local StartButton = Instance.new("TextButton")
StartButton.Size = UDim2.new(0.45, 0, 0, 35)
StartButton.Position = UDim2.new(0.05, 0, 1, -45)
StartButton.BackgroundColor3 = Color3.fromRGB(67, 181, 129)
StartButton.Text = "Start AutoFarm"
StartButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StartButton.Font = Enum.Font.SourceSansBold
StartButton.TextSize = 18
StartButton.Parent = Frame

local StopButton = Instance.new("TextButton")
StopButton.Size = UDim2.new(0.45, 0, 0, 35)
StopButton.Position = UDim2.new(0.5, 0, 1, -45)
StopButton.BackgroundColor3 = Color3.fromRGB(237, 66, 69)
StopButton.Text = "Stop AutoFarm"
StopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StopButton.Font = Enum.Font.SourceSansBold
StopButton.TextSize = 18
StopButton.Parent = Frame

-- Control variables
local AutoFarmRunning = false
local AutoFarmCoroutine

local function UpdateStatus(text)
    StatusLabel.Text = "Status: " .. text
end

local function StartAutoFarm()
    if AutoFarmRunning then return end
    AutoFarmRunning = true
    UpdateStatus("Running")

    ChangeState(State.WaitingForRound)

    AutoFarmCoroutine = coroutine.create(function()
        while AutoFarmRunning do
            if CurrentState == State.WaitingForRound then
                WaitingForRound()
            elseif CurrentState == State.Action then
                ActionState()
            elseif CurrentState == State.WaitingForRoundEnd then
                waitForRoundEnd()
            elseif CurrentState == State.RespawnState then
                RespawnState()
            elseif CurrentState == State.StandStillWait then
                StandStillWait()
            end
            task.wait()
        end
        UpdateStatus("Stopped")
    end)
    coroutine.resume(AutoFarmCoroutine)
end

local function StopAutoFarm()
    if not AutoFarmRunning then return end
    AutoFarmRunning = false
    Working = false
    UpdateStatus("Stopped")
end

StartButton.MouseButton1Click:Connect(StartAutoFarm)
StopButton.MouseButton1Click:Connect(StopAutoFarm)
