local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Rayfield/main/source"))()

local Window = Rayfield:CreateWindow({
    Name = "coconut hub",
    LoadingTitle = "coconut hub",
    LoadingSubtitle = "by your name here",
    ConfigurationSaving = {
        Enabled = false
    },
    Discord = {
        Enabled = false
    },
    KeySystem = false
})

local Tab = Window:CreateTab("Auto Farm", 4483362458)
local Section = Tab:CreateSection("Coin Farming")

local autofarmEnabled = false
local autofarmThread

local rt = {}
local Octree = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sleitnick/rbxts-octo-tree/main/src/init.lua", true))()

rt.Players = game:GetService("Players")
rt.player = rt.Players.LocalPlayer
rt.Material = Enum.Material.Ice
rt.TpBackToStart = true
rt.radius = 200
rt.walkspeed = 30
rt.touchedCoins = {}
rt.positionChangeConnections = setmetatable({}, { __mode = "v" })
rt.MainGUI = rt.player:WaitForChild("PlayerGui"):WaitForChild("MainGUI")
rt.octree = Octree.new()

function rt:Character()
    return self.player.Character or self.player.CharacterAdded:Wait()
end

function rt:Map()
    for _, v in workspace:GetDescendants() do
        if v:IsA("Model") and v.Name == "Base" then
            return v.Parent
        end
    end
    return nil
end

function rt.Disconnect(connection)
    if typeof(connection) ~= "RBXScriptConnection" then return end
    if connection.Connected then connection:Disconnect() end
end

local function isCoinTouched(coin)
    return rt.touchedCoins[coin]
end

local function markCoinAsTouched(coin)
    rt.touchedCoins[coin] = true
    local node = rt.octree:FindFirstNode(coin)
    if node then
        rt.octree:RemoveNode(node)
    end
end

local function setupTouchTracking(coin)
    local touchInterest = coin:FindFirstChildWhichIsA("TouchTransmitter")
    if touchInterest then
        local connection
        connection = touchInterest.AncestryChanged:Connect(function(_, parent)
            if parent == nil then
                markCoinAsTouched(coin)
                rt.Disconnect(connection)
            end
        end)
        rt.positionChangeConnections[coin] = connection
    end
end

local function setupPositionTracking(coin, LastY)
    local connection
    connection = coin:GetPropertyChangedSignal("Position"):Connect(function()
        if LastY and LastY ~= coin.Position.Y then
            markCoinAsTouched(coin)
            rt.Disconnect(connection)
            coin:Destroy()
        end
    end)
    rt.positionChangeConnections[coin] = connection
end

local function populateOctree()
    rt.octree:ClearAllNodes()
    for _, d in pairs(rt.coinContainer:GetDescendants()) do
        if d:IsA("TouchTransmitter") then
            local coin = d.Parent
            if not isCoinTouched(coin) then
                rt.octree:CreateNode(coin.Position, coin)
                setupTouchTracking(coin)
            end
            setupPositionTracking(coin, coin.Position.Y)
        end
    end

    rt.Added = rt.coinContainer.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("MeshPart") and descendant.Material == rt.Material then
            local coin = descendant.Parent
            if not isCoinTouched(coin) then
                rt.octree:CreateNode(coin.Position, coin)
                setupTouchTracking(coin)
                setupPositionTracking(coin, coin.Position.Y)
            end
        end
    end)

    rt.Removing = rt.coinContainer.DescendantRemoving:Connect(function(descendant)
        if descendant:IsA("TouchTransmitter") and descendant.Parent.Name == "Coin_Server" then
            local coin = descendant.Parent
            if isCoinTouched(coin) then
                markCoinAsTouched(coin)
            end
        end
    end)
end

local function moveToPositionSlowly(targetPosition, duration)
    rt.humanoidRootPart = rt:Character().PrimaryPart
    local start = rt.humanoidRootPart.Position
    local startTime = tick()

    while autofarmEnabled do
        local elapsed = tick() - startTime
        local alpha = math.min(elapsed / duration, 1)
        rt:Character():PivotTo(CFrame.new(start:Lerp(targetPosition, alpha)))
        if alpha >= 1 then task.wait(0.2); break end
        task.wait()
    end
end

local function collectCoins()
    rt.coinContainer = rt:Map():WaitForChild("CoinContainer")
    rt.waypoint = rt:Character():GetPivot()

    populateOctree()

    while autofarmEnabled do
        if rt.MainGUI.Game.CoinBags.Container.SnowToken.FullBagIcon.Visible then
            break
        end

        local nearestNode = rt.octree:GetNearest(rt:Character().PrimaryPart.Position, rt.radius, 1)[1]
        if nearestNode then
            local coin = nearestNode.Object
            if not isCoinTouched(coin) then
                local pos = coin.Position
                local dist = (rt:Character().PrimaryPart.Position - pos).Magnitude
                local duration = dist / rt.walkspeed

                moveToPositionSlowly(pos, duration)
                markCoinAsTouched(coin)
                task.wait(0.2)
            end
        else
            task.wait(1)
        end
    end

    if rt.TpBackToStart then
        rt:Character():PivotTo(rt.waypoint)
    end
end

local function startAutofarm()
    autofarmEnabled = true
    autofarmThread = coroutine.create(collectCoins)
    coroutine.resume(autofarmThread)

    rt.player.CharacterRemoving:Connect(function()
        autofarmEnabled = false
        if autofarmThread then
            coroutine.close(autofarmThread)
            autofarmThread = nil
        end
        for _, c in pairs(rt.positionChangeConnections) do rt.Disconnect(c) end
        rt.Disconnect(rt.Added)
        rt.Disconnect(rt.Removing)
    end)
end

local function stopAutofarm()
    autofarmEnabled = false
    if autofarmThread then
        coroutine.close(autofarmThread)
        autofarmThread = nil
    end
    for _, c in pairs(rt.positionChangeConnections) do rt.Disconnect(c) end
    rt.Disconnect(rt.Added)
    rt.Disconnect(rt.Removing)
end

Tab:CreateToggle({
    Name = "Enable Coin Autofarm",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            startAutofarm()
        else
            stopAutofarm()
        end
    end
})
